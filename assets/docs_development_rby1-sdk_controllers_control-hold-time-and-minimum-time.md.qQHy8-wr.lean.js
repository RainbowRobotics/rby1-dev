import{_ as e,c as o,a2 as i,o as a}from"./chunks/framework.Dpo7o-4l.js";const n="/rby1-dev/assets/robot-control-state-transitions.BurME3-v.png",p=JSON.parse('{"title":"Control Hold Time and Minimum Time","description":"","frontmatter":{"title":"Control Hold Time and Minimum Time","outline":"deep"},"headers":[],"relativePath":"docs/development/rby1-sdk/controllers/control-hold-time-and-minimum-time.md","filePath":"docs/development/rby1-sdk/controllers/control-hold-time-and-minimum-time.md"}'),r={name:"docs/development/rby1-sdk/controllers/control-hold-time-and-minimum-time.md"};function l(s,t,m,h,d,c){return a(),o("div",null,t[0]||(t[0]=[i('<h1 id="control-hold-time-and-minimum-time" tabindex="-1">Control Hold Time and Minimum Time <a class="header-anchor" href="#control-hold-time-and-minimum-time" aria-label="Permalink to &quot;Control Hold Time and Minimum Time&quot;">​</a></h1><h2 id="control-state-transition" tabindex="-1">Control State Transition <a class="header-anchor" href="#control-state-transition" aria-label="Permalink to &quot;Control State Transition&quot;">​</a></h2><figure><img src="'+n+'" alt="missing"></figure><h2 id="control-hold-time" tabindex="-1">Control Hold Time <a class="header-anchor" href="#control-hold-time" aria-label="Permalink to &quot;Control Hold Time&quot;">​</a></h2><p>Control Hold Time defines the duration for which the robot maintains the target (position/velocity) after reaching it.</p><h3 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h3><ul><li>When a control command is sent, the robot moves toward the target while considering constraints such as speed and acceleration limits.</li><li>Once the target is reached, the robot maintains the target state for the duration of the Control Hold Time.</li><li>After the Control Hold Time expires, the control ends, and the robot transitions to the ControlFinished state.</li></ul><h2 id="minimum-time" tabindex="-1">Minimum Time <a class="header-anchor" href="#minimum-time" aria-label="Permalink to &quot;Minimum Time&quot;">​</a></h2><p>Minimum Time represents the minimum duration required for the robot to reach the target state.</p><h3 id="how-it-works-1" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works-1" aria-label="Permalink to &quot;How It Works&quot;">​</a></h3><ul><li>Larger values: The robot reaches the target more slowly.</li><li>Smaller values: The robot reaches the target more quickly.</li><li>Constraints: If Minimum Time is set faster than the hardware specifications or speed/acceleration limits allow, the robot may not reach the target within that time, and the actual time to reach the target will naturally increase.</li></ul><h2 id="common-mistake" tabindex="-1">Common Mistake <a class="header-anchor" href="#common-mistake" aria-label="Permalink to &quot;Common Mistake&quot;">​</a></h2><p>One common mistake is setting the Control Hold Time too short, especially in <strong>Stream Mode</strong>. As shown in the diagram, the control remains active only until the <strong>ControlFinished</strong> state is reached. If the Control Hold Time is too short and the stream cycle is too long, the stream may expire, causing the control to end prematurely.</p><p>To better understand how Control Hold Time affects each mode, let’s examine its impact:</p><h3 id="once-mode" tabindex="-1">Once Mode <a class="header-anchor" href="#once-mode" aria-label="Permalink to &quot;Once Mode&quot;">​</a></h3><ul><li>A single control command is sent, and the robot moves toward the target.</li><li>Once the target is reached, the robot maintains the state (position/velocity) for the duration of the Control Hold Time.</li></ul><h4 id="impact" tabindex="-1">Impact <a class="header-anchor" href="#impact" aria-label="Permalink to &quot;Impact&quot;">​</a></h4><ul><li>If the Control Hold Time is too short, the robot may not maintain the target long enough to complete its intended task.</li><li>A well-configured Control Hold Time ensures the robot holds its target state as needed before transitioning to the <strong>ControlFinished</strong> state.</li></ul><h3 id="stream-mode" tabindex="-1">Stream Mode <a class="header-anchor" href="#stream-mode" aria-label="Permalink to &quot;Stream Mode&quot;">​</a></h3><ul><li>Commands are sent continuously, allowing dynamic updates to the target while the control remains active.</li></ul><h4 id="impact-1" tabindex="-1">Impact <a class="header-anchor" href="#impact-1" aria-label="Permalink to &quot;Impact&quot;">​</a></h4><ul><li>If the Control Hold Time is too short and the stream cycle is too long, the control may prematurely transition to the <strong>ControlFinished</strong> state, causing the stream to expire.</li><li>A properly configured Control Hold Time ensures the robot remains active between stream updates, preventing interruptions.</li></ul><h4 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h4><ul><li>If the Control Hold Time is set to <strong>1 second</strong>, and no new input is received within 1 second, the control transitions to the finished state.</li><li>If the Control Hold Time is set to <strong>100 seconds</strong>, and the stream cycle operates every 1 second, the target can be updated dynamically, maintaining continuous control.</li></ul>',24)]))}const g=e(r,[["render",l]]);export{p as __pageData,g as default};
