import{_ as a}from"./chunks/rby-software-stack-white.5BbzVavd.js";import{_ as o,c as e,a5 as r,o as i}from"./chunks/framework.Bl9iQvl_.js";const g=JSON.parse('{"title":"Software Stack","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ko/docs/introduction/sw/software-stack.md","filePath":"ko/docs/introduction/sw/software-stack.md"}'),s={name:"ko/docs/introduction/sw/software-stack.md"};function n(l,t,c,p,m,d){return i(),e("div",null,t[0]||(t[0]=[r('<h1 id="software-stack" tabindex="-1">Software Stack <a class="header-anchor" href="#software-stack" aria-label="Permalink to &quot;Software Stack&quot;">​</a></h1><h2 id="개요-overview" tabindex="-1">개요 (Overview) <a class="header-anchor" href="#개요-overview" aria-label="Permalink to &quot;개요 (Overview)&quot;">​</a></h2><p>이 소프트웨어 아키텍처는 로봇의 기능을 최대한 활용할 수 있도록 하며, 다양한 요구를 충족시키고 확장 가능한 소프트웨어 구조를 통해 쉽고 빠르게 애플리케이션을 개발할 수 있게 합니다.</p><figure><img src="'+a+'" alt="missing" style="margin:auto;"><figcaption style="text-align:center;">[ Software stack of RB-Y1 ]</figcaption></figure><p>이 소프트웨어 구조는 다음과 같이 구성됩니다:</p><ul><li><p>독립적인 로봇 내부 제어기(<strong>Robot PC</strong>)는 안정적인 성능 및 안전성을 보장하며, 애플리케이션 제어 PC(<strong>User PC</strong>)와의 이중화를 통해 확장성을 제공합니다.</p></li><li><p><strong>Non-realtime communication channels</strong>은 실시간 제어가 필요하지 않은 고급 명령(movej, movel 등)과 로봇 설정을 위해 사용됩니다.</p></li><li><p><strong>Realtime command channels</strong>은 실시간 응답이 필요한 저수준 명령을 위해 사용됩니다.</p></li><li><p><strong>Robot model library</strong>는 시뮬레이션 환경을 구축할 수 있게 하며, 로봇의 운동학 및 동역학 파라미터에 접근할 수 있습니다.</p></li><li><p>고급 제어를 구현하기 위한 다양한 라이브러리(예: 모션/태스크 플래너)가 포함되어 있습니다.</p></li></ul><h2 id="시뮬레이션-simulation" tabindex="-1">시뮬레이션 (Simulation) <a class="header-anchor" href="#시뮬레이션-simulation" aria-label="Permalink to &quot;시뮬레이션 (Simulation)&quot;">​</a></h2><p>시뮬레이션 환경 구축을 위한 모델(URDF/MJCF)을 제공합니다.</p>',8)]))}const h=o(s,[["render",n]]);export{g as __pageData,h as default};
