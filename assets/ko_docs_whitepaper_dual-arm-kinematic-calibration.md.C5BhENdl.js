import{_ as a,c as t,o as e,a3 as i}from"./chunks/framework.o8T5S5EX.js";const u=JSON.parse('{"title":"Kinematic Calbiration","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ko/docs/whitepaper/dual-arm-kinematic-calibration.md","filePath":"ko/docs/whitepaper/dual-arm-kinematic-calibration.md"}'),r={name:"ko/docs/whitepaper/dual-arm-kinematic-calibration.md"},o=i('<h1 id="kinematic-calbiration" tabindex="-1">Kinematic Calbiration <a class="header-anchor" href="#kinematic-calbiration" aria-label="Permalink to &quot;Kinematic Calbiration&quot;">​</a></h1><p>양팔 관절의 영점 기준을 URDF와 동일하게 설정하기 위한 과정입니다.</p><ul><li>사전 준비</li></ul><p>대략적인 영점 작업이 수행된 로봇에서만 해당 과정을 수행할 수 있습니다.</p><p>전체 과정 중 중력보상을 통해 팔을 자유롭게 움직이는데 영점 작업이 포함되어 있는데, 중력 보상 토크값이 실제 필요 값과 크게 다르면 로봇이 위험 동작 할 수 있습니다.</p><ul><li>step 1</li></ul><p><a href="https://github1s.com/RainbowRobotics/rby1-sdk/blob/main/examples/gravity_compensation.cpp" target="_blank" rel="noreferrer">example/gravity_compensation</a> 코드를 이용해 양팔에 중력보상 모드를 실행합니다. 중력보상 모드가 정상적으로 동작한다면 사람이 로봇의 양팔을 자유롭게 움직일 수 있습니다.</p><ul><li>step 2</li></ul><p>제공되는 calibration kit를 양팔에 고정하고 <a href="https://github1s.com/RainbowRobotics/rby1-sdk/blob/main/examples/get_robot_state.cpp" target="_blank" rel="noreferrer">example/get_robot_state</a> 코드를 실행합니다.</p><ul><li>step 3</li></ul><p>다양한 자세에서 (20개 이상) 관절 위치 정보를 수집하고 데이터를 저장합니다.</p><ul><li>step 4</li></ul><p><a href="https://github1s.com/RainbowRobotics/rby1-sdk/blob/main/examples/kinematic_calibration.cpp" target="_blank" rel="noreferrer">example/kinematic_calibration</a> 코드를 실행합니다. 수집된 데이터와 calibration kit의 사전 정의된 정보를 이용하여 현재 로봇의 영점이 URDF 기준으로 벗어난 정도가 출력됩니다.</p><ul><li>step 5</li></ul><p>로봇을 위에서 얻어진 위치대로 이동시킨 후 영점 리셋을 진행합니다. 영점 리셋 방법은 <a href="#">영점 리셋 방법</a> 을 참고하세요.</p>',15),l=[o];function n(p,c,s,m,b,_){return e(),t("div",null,l)}const h=a(r,[["render",n]]);export{u as __pageData,h as default};
